buildscript {

    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

plugins {
  id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/patreon.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/artifacts.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/maven.gradle'

loadSecrets()
version = "${mod_version}" + getBuildNumber()
group = "${mod_group}"
archivesBaseName = "${mod_name}-${version_minecraft}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    mappings channel: "snapshot", version: "${version_mcp}"

    runs {
        client {
            workingDirectory file("run")

            properties 'mixin.env.disableRefMap': 'true'

            mods {
                mobstages {
                    source(sourceSets.main)
                }
            }
        }

        server {
            workingDirectory file("run")

            properties 'mixin.env.disableRefMap': 'true'

            mods {
                mobstages {
                    source(sourceSets.main)
                }
            }
        }
    }
}

repositories {

    maven {

        url 'https://maven.mcmoddev.com'
    }

    maven {

        url 'http://tehnut.info/maven'
    }

    maven {

        url 'http://maven.blamejared.com'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_forge}"
    compile fg.deobf("net.darkhax.bookshelf:Bookshelf-1.16.5:${version_bookshelf}")
    compile fg.deobf("net.darkhax.gamestages:GameStages-1.16.4:${version_gamestages}")
    compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.5:${version_minetweaker}")
    //compile fg.deobf("mcp.mobius.waila:Hwyla:${version_hwyla}")
}

def version_properties = [
        "mod_version": mod_version,
        "version_forge" : version_forge,
        "version_loader": version_loader
]

processResources {
    outputs.upToDateWhen { false }
    def modsToml = copySpec {
        from(sourceSets.main.resources) {
            include "META-INF/mods.toml"
            expand version_properties
        }
    }
    //Copy it into the build dir
    with modsToml
    into "$buildDir/resources/main/"
}

String getBuildNumber() {

    return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : System.getenv('TRAVIS_BUILD_NUMBER') ? System.getenv('TRAVIS_BUILD_NUMBER') : '0';
}

//Shuts up javadoc failures
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

curseforge {

    apiKey = findProperty('curse_auth') ?: 0
    def versions = "${curse_versions}".split(', ')

    project {

        id = "${curse_project}"
        releaseType = 'alpha'
        changelog = getGitChangelog() + "\n\nHuge thanks to my supporters on [Patreon](https://www.patreon.com/Darkhax?MCChangelog?${mod_class})\n\n" + getPledgeLog()
        changelogType = 'markdown'

        versions.each {

            addGameVersion "${it}"
        }

        if (project.hasProperty('curse_requirements') || project.hasProperty('curse_optionals')) {

            mainArtifact(jar) {

                relations {

                    if (project.hasProperty('curse_requirements')) {
                        def requirements = "${curse_requirements}".split(', ')
                        requirements.each {

                            requiredLibrary "${it}"
                        }
                    }

                    if (project.hasProperty('curse_optionals')) {
                        def optionals = "${curse_optionals}".split(', ')
                        optionals.each {

                            optionalLibrary "${it}"
                        }
                    }
                }
            }
        }

        addArtifact(sourcesJar)
        addArtifact(javadocJar)
        addArtifact(deobfJar)
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    onlyIf {

        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
